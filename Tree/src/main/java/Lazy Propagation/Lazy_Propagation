public class Main {
    
    public static void main(String[] args) {
       
        int a[] = new int[]{5, 6, 3, 7, 2, 4, 1};
        int n = a.length;
       
        Tree tree = new Tree(a);
        
        tree.add();
        tree.print();
        
        System.out.println(tree.query(2, 4));
        
        tree.update(2, 4, 3);
    
        tree.print();
        
        System.out.println(tree.query(2, 4));
        
        System.out.println(tree.query(2, 2));
        
        tree.print();
        
        System.out.println(tree.query(3, 3));
        
        tree.print();
        
    }
    
    private static class Tree {
        
        int segment[], a[], lazy[];
        int n, len;
        
        public Tree(int a[]) {
            
            this.a = a;
            this.n = this.a.length;
            
            this.len = (int)Math.ceil(Math.log(this.n) / Math.log(2));
            this.len = 2 * (int)Math.pow(2, this.len) - 1;
            
            this.segment = new int[this.len];
            this.lazy = new int[this.len];
            
        }
        
        private void add() {
            
            add(0, 0, n - 1);
            
        }
        
        private int add(int i, int l, int r) {
            
            if(l > r) {
                
                return 0;
                
            }
            
            int mid = (l + r) / 2;
            
            if(l == r) {
                
                return segment[i] = a[l];
                
            }
            
            return segment[i] = add(2 * i + 1, l, mid) + add(2 * i + 2, mid + 1, r);
            
        }
        
        private int query(int l, int r) {
            
            return search(0, 0, n - 1, l, r);
            
        }
        
        private int search(int i, int start, int end, int l, int r) {
            
            if(start > end) {
                
                return 0;
                
            }
            
            int mid = (start + end) / 2;
            
            if(l > end || start > r) {
                
                return 0;
                
            }
            
            if(lazy[i] != 0) {
                
                segment[i] += lazy[i];
                
                if(start != end) {
                    
                    lazy[2 * i + 1] += lazy[i] / 2;
                    lazy[2 * i + 2] += lazy[i] / 2;
                    
                }
                
                lazy[i] = 0;
                
            }
            
            if(start >= l && r >= end) {
               
                return segment[i];
                
            }
            
            return search(2 * i + 1, start, mid, l, r) + search(2 * i + 2, mid + 1, end, l, r);
            
        }
        
        private void update(int l, int r, int inc) {
            
            update(0, 0, n - 1, l, r, inc);
            
        }
        
        private void update(int i, int start, int end, int l, int r, int inc) {
            
            if(start > end) {
                
                return;
                
            }
            
            if(start == end) {
                
                if(start >= l && r >= end) {
                    
                    segment[i] += (end - start + 1) * inc;
                    
                }
                
                return;
                
            }
            
            if(l > end || start > r) { // no overlap.
                
                return;
                
            }
            
            if(lazy[i] != 0) {
                
                segment[i] += lazy[i];
                
                if(start != end) {
                    
                    lazy[2 * i + 1] += lazy[i] / 2;
                    lazy[2 * i + 2] += lazy[i] / 2;
                    
                }
                
                lazy[i] = 0;
                
            }
            
            int mid = (start + end) / 2;
            
            if(start >= l && r >= end) { // fully overlap.
                
                segment[i] += (end - start + 1) * inc;
                
                if(start != end) {
                    
                    lazy[i] = (end - start + 1) * inc;
                    
                    lazy[2 * i + 1] += (lazy[i] / 2);
                    lazy[2 * i + 2] += (lazy[i] / 2);
                    
                    lazy[i] = 0;
                    
                }
                
                return;
                
            } else if(l >= start && r >= end) { // partially overlap.
                
                segment[i] += (end - l + 1) * inc;
                
            } else if(start >= l && end >= r) { // partially overlap.
                
                segment[i] += (r - start + 1) * inc;
                
            } else if(l >= start && end >= r) { // partially overlap.
                
                segment[i] += (r - l + 1) * inc;
                
            }
            
            update(2 * i + 1, start, mid, l, r, inc);
            update(2 * i + 2, mid + 1, end, l, r, inc);
            
        }
        
        private void print() {
            
            for(int i : segment) {
                
                System.out.print(i + " ");
                
            }
            
            System.out.println();
            
        }
        
    }
}
